1. let
2. const

3. Array destructuring
    var nos = [3,1,4,2,5]
    //var x = nos[0], y = nos[1]
    var [x,y] = nos

4. Rest operator (array)
    var nos = [3,1,4,2,5]
    var [x,y, ...z] = nos

5. Spread operator (array)
    var nos = [3,1,4,2,5]
    var newNos = [ ...nos, 10, 20, 30 ]

6. Object destructuring
    var person = {
        name: 'John',
        age: 30,
        city: 'New York'
    }
    var {name, age} = person
    var {name:x, city:y} = person

7. Rest operator (object)
    var person = {
        name: 'John',
        age: 30,
        city: 'New York'
    }
    var {name, ...z} = person

8. Spread operator (object)
    var person = {
        name: 'John',
        age: 30,
        city: 'New York'
    }
    var newPerson = {
        ...person,
        name: 'Jane'
    }
    var newPerson = { ...person, org : 'Dropsuite', name : 'Danny' }

9. default parameters
    function add(x=10,y=20){
        return x + y
    }

    add()    
    30
    add(100)
    120
    add(undefined, 200)
    210
    add(100,200)
    300

10. arrow functions
    /*
    //function statement
    function add(x,y){
        return x + y;
    }

    //function expression
    var add = function(x,y){
        return x + y;
    }

    //arrow function
    var add = (x,y) => {
        return x + y;
    }
    */
    var add = (x,y) => x + y;

11. template strings
    var x = 10, y = 20

    var s = `sum of ${x} and ${y} is ${x+y}`

    s
    'sum of 10 and 20 is 30'
    var s = `sum of ${x} 
    and ${y} 
    is ${x+y}`

12. iterator
    var nos = [3,1,4,2,5]
    
    for (var no of nos)
        console.log(no)

13. class

    class Employee{
        id = 0;
        name = '';
        salary = 0;

        constructor(id, name, salary){
            this.id = id;
            this.name = name;
            this.salary = salary;
        }

        display(){
            console.log(`Employee : id=${this.id}, name = ${this.name}, salary = ${this.salary}`);
        }
        
    }

14. class inhertance

    class FulltimeEmployee extends Employee{
        benefits = '';
        constructor(id, name, salary, benefits){
            super(id, name, salary);
            this.benefits = benefits;
        }
    }
    var fte = new FulltimeEmployee(200, 'Danny', 20000, 'Healthcare')

    fte.display()

15. object construction enhancement
    var id = 100,
        name = 'Philip',
        salary = 20000
    
    var emp = { id, name , salary  }

Visit https://es6-features.org for other features



add(10,20)          //=> 30
add(10,"20")        //=> 30
add(10,"20","abc")  //=> 30
add(10)             //=> 10
add()               //=> 0
add([10,20,30])
add([10,20,"30"])
add([10,20,"30", "abc"])
add([10,20,"30", "abc"],[40,50])
add([10,20,["30", "abc"]],[40,50])
add(function(){ return 10}, function(){ return 20}) //=> 30
add(function(){ return [10,20,["30", "abc"]] }, function(){ return [40,50]})
add(function(){ 
    return [
        function(){ return [10,20,["30", "abc"]] }, 
        function(){ return [40,50]}
    ];
})


function add(){
    function parseArg(n){
        if (typeof n === 'function') return parseArg(n());
        if (Array.isArray(n)) return add.apply(this, n)
        return isNaN(n) ?  0 : parseInt(n);
    }
    return arguments.length <= 1 ? parseArg(arguments[0]) : parseArg(arguments[0]) + add(Array.prototype.slice.call(arguments, 1))
}

function add(...args){
    function parseArg(n){
        if (typeof n === 'function') return parseArg(n());
        if (Array.isArray(n)) return add(...n)
        return isNaN(n) ?  0 : parseInt(n);
    }
    return args.length <= 1 ? parseArg(args[0]) : parseArg(args[0]) + add(args.slice(1))
}