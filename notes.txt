Magesh Kuppan

Software Requirements
    Node.js (LTS)
    Chrome Browser
    Visual Studio Code

What is React?
    React is a library for building RIA / SPA

Problem
    Salary Calculator
        Basic
        HRA
        DA
        Tax (%)

        Salary = Basic + HRA + DA - Tax(%)

    Assumptions
        1. App meets 100% expectations of the client
            No need for validations
            No need for error messages
        2. The production deployment team will take care of prepare the code for production
            Create .js files
            Create .css files

Incremental
    Create the DOM once
    Manipulate the created DOM everytime the model changes
    May become more imperative

All in One
    Create a new DOM fragment everytime the model changes with the current state of the model
    Can be more declarative

Babel
    Transpiler
    ES6 to ES5

JSX & HTML
    * Open tags without closed tags are allowed in HTML
      Every open tag must have a corresponding close tag in JSX

    * "for" attribute is allowed in HTML
      use "htmlFor" in place of "for" in JSX

    * "class" attribute is allowed in HTML
      use "className" in place of "class" in JSX

Approach
    - Replace JS with a new language
        ex Google Dart

    - Create compilers for other high level languages that will compile to JS
        CoffeeScript
        TypeScript

    - Add more features to JS
        - ES6

Component
    Represents a single UI responsibility that can be reused
    Encapsulates Presentation + UI Behavior + State
    Can be created as a 'Class' / 'function'

Assignment:
    Modify the 06-products.html file to do the following
        1. should be able to add new products dynamically
        2. should be able to remove added products


Class Component Overheads
    1. For every usage of a component, a new instance of the component class has to be created
    2. The life cycle events are executed for every component even when they are not subscribed


React Hooks
    functions that handle the side effects of a functional component
    Can be used ONLY in a functional component
    hook function names must start with the word 'use'
    Built in hooks
        useState
        useEffect
        useContext
        useReducer
        useCallback
        useMemo
        useRef
        useImperativeHandle
        useLayoutEffect
        useDebugValue

Side Effects 
    - things that prevent a function from becoming a 'pure function'

Pure Function
    Function whose invocation can be replaced with the result of the function without affecting the final outcome

Context
    Used to share data across component hierarchy without needing to pass the data as props

State
    UI State
        Any data that supports the UI responsibilities of the component
        It is highly UNLIKELY that a change in this data will have to be recognized by other parts of the application
        Feel free to keep this data in the component state

    App State
        Any data the supports the core logic of the application
        It is highly LIKELY that a change in this data will have to be recognized by other parts of the application
        DONOT keep this data in the component state

Assignment:
    Solve the Products Management problem using useReducer hook (dont worry about displaying the count outside the component)
    Use Cases
        1. adding products
        2. listing products
        3. removing products


Assignment:
    Create your own version of useReducer hook
    
    function useReducer(reducer, currentState){
        const [state, setState] = useState(currentState);
        const dispatch = useCallback(
            action => {
                const newState = reducer(state, action);
                setState(newState);
            },
            [state]
        );
        return [state, dispatch];
    }

    
To install yarn (package manager)
    npm install -g yarn

To create a react application
    yarn create react-app bug-tracker-app

ES6 modules
    1. Everything defined in a JS/TS/JSX/TSX file is considered PRIVATE by default
    2. Any entity that need to be made public should be explicitly EXPORTED
    3. Any entity from another file has to be explicitly IMPORTED to use

To install redux
    yarn add redux

    /spinner
        /actions
            increment.js
            decrement.js
            index.js
        /reducers
            spinnerReducer.js
        /index.js
            Spinner component
    /store
        index.js
    
    /index.js
        import the action creators
        import the store
        create action dispatchers
        render the component

Middleware
    to encapsulate any logic that has to be applied across actions


axios

//GET
async function getBugs(){
    const response = await axios.get('http://localhost:3030/bugs');
    return response.data;
}
const bugs = await getBugs()
console.table(bugs)


//POST
const newBugData = { 
    id : 0,
    name : 'user access denied',
    isClosed : false,
    createdAt : new Date(),
    projectId : 3
};
const response = await axios.post('http://localhost:3030/bugs', newBugData)
const newBug = response.data
console.log(newBug)

//PUT
const updatedBugData = { 
    id : 6,
    name : 'user access denied for administrator',
    isClosed : true,
    createdAt : new Date(),
    projectId : 3
};
var response = await axios.put('http://localhost:3030/bugs/6', updatedBugData)
const updatedBug = response.data
console.log(updatedBug)


//DELETE
await axios.delete('http://localhost:3030/bugs/3')

Implement the following operation for bugs (with server communication)
    Listing the bugs
    Adding a new bug
    Toggling an existing bug
    Removing an existing bug
